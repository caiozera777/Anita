[
    {
        "label": "create",
        "importPath": "crud_pessoa",
        "description": "crud_pessoa",
        "isExtraImport": true,
        "detail": "crud_pessoa",
        "documentation": {}
    },
    {
        "label": "read_all",
        "importPath": "crud_pessoa",
        "description": "crud_pessoa",
        "isExtraImport": true,
        "detail": "crud_pessoa",
        "documentation": {}
    },
    {
        "label": "read_by_id",
        "importPath": "crud_pessoa",
        "description": "crud_pessoa",
        "isExtraImport": true,
        "detail": "crud_pessoa",
        "documentation": {}
    },
    {
        "label": "update",
        "importPath": "crud_pessoa",
        "description": "crud_pessoa",
        "isExtraImport": true,
        "detail": "crud_pessoa",
        "documentation": {}
    },
    {
        "label": "random",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "random",
        "description": "random",
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "choice",
        "importPath": "random",
        "description": "random",
        "isExtraImport": true,
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "shuffle",
        "importPath": "random",
        "description": "random",
        "isExtraImport": true,
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "choice",
        "importPath": "random",
        "description": "random",
        "isExtraImport": true,
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "shuffle",
        "importPath": "random",
        "description": "random",
        "isExtraImport": true,
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "choice",
        "importPath": "random",
        "description": "random",
        "isExtraImport": true,
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "shuffle",
        "importPath": "random",
        "description": "random",
        "isExtraImport": true,
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "sleep",
        "importPath": "time",
        "description": "time",
        "isExtraImport": true,
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "sleep",
        "importPath": "time",
        "description": "time",
        "isExtraImport": true,
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "sqlite3",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sqlite3",
        "description": "sqlite3",
        "detail": "sqlite3",
        "documentation": {}
    },
    {
        "label": "boas_vindas",
        "kind": 2,
        "importPath": "aula06.aula01",
        "description": "aula06.aula01",
        "peekOfCode": "def boas_vindas():\n    print(\"bem-vindo ao sistema soma\")\n# função\n#responsabilidade unica - uma funcao deve fazer apenas uma coisa\n#ter apenas uma responsabilidade - ajuda no reaproveitamento de codigo\ndef pega_nome():\n    nome = input('Digite seu nome')\n    return nome\ndef saudacao(nome):\n    print(f'olá, {nome}')",
        "detail": "aula06.aula01",
        "documentation": {}
    },
    {
        "label": "pega_nome",
        "kind": 2,
        "importPath": "aula06.aula01",
        "description": "aula06.aula01",
        "peekOfCode": "def pega_nome():\n    nome = input('Digite seu nome')\n    return nome\ndef saudacao(nome):\n    print(f'olá, {nome}')\nboas_vindas()\nnome2 = pega_nome()\nsaudacao(nome2)",
        "detail": "aula06.aula01",
        "documentation": {}
    },
    {
        "label": "saudacao",
        "kind": 2,
        "importPath": "aula06.aula01",
        "description": "aula06.aula01",
        "peekOfCode": "def saudacao(nome):\n    print(f'olá, {nome}')\nboas_vindas()\nnome2 = pega_nome()\nsaudacao(nome2)",
        "detail": "aula06.aula01",
        "documentation": {}
    },
    {
        "label": "nome2",
        "kind": 5,
        "importPath": "aula06.aula01",
        "description": "aula06.aula01",
        "peekOfCode": "nome2 = pega_nome()\nsaudacao(nome2)",
        "detail": "aula06.aula01",
        "documentation": {}
    },
    {
        "label": "soma",
        "kind": 2,
        "importPath": "aula06.aula02",
        "description": "aula06.aula02",
        "peekOfCode": "def soma(numero1, numero2):\n    resultado = numero1 + numero2\n    return resultado\nsoma(10, 15)\n#--------------------------------------------------------\ndef soma(numero1, numero2):\n    return numero1 + numero2\nprint(soma(10, 15))",
        "detail": "aula06.aula02",
        "documentation": {}
    },
    {
        "label": "soma",
        "kind": 2,
        "importPath": "aula06.aula02",
        "description": "aula06.aula02",
        "peekOfCode": "def soma(numero1, numero2):\n    return numero1 + numero2\nprint(soma(10, 15))",
        "detail": "aula06.aula02",
        "documentation": {}
    },
    {
        "label": "#legibilidade",
        "kind": 5,
        "importPath": "aula06.aula02",
        "description": "aula06.aula02",
        "peekOfCode": "#legibilidade = facilidade compreensao do codigo por outro dec\ndef soma(numero1, numero2):\n    resultado = numero1 + numero2\n    return resultado\nsoma(10, 15)\n#--------------------------------------------------------\ndef soma(numero1, numero2):\n    return numero1 + numero2\nprint(soma(10, 15))",
        "detail": "aula06.aula02",
        "documentation": {}
    },
    {
        "label": "soma",
        "kind": 2,
        "importPath": "aula06.aula03",
        "description": "aula06.aula03",
        "peekOfCode": "def soma(n1, n2):\n    resultado = n1 + n2\n    return resultado\nn1 = 10\nn2 = 20\nresult = soma(n1, n2)\nprint(result)",
        "detail": "aula06.aula03",
        "documentation": {}
    },
    {
        "label": "n1",
        "kind": 5,
        "importPath": "aula06.aula03",
        "description": "aula06.aula03",
        "peekOfCode": "n1 = 10\nn2 = 20\nresult = soma(n1, n2)\nprint(result)",
        "detail": "aula06.aula03",
        "documentation": {}
    },
    {
        "label": "n2",
        "kind": 5,
        "importPath": "aula06.aula03",
        "description": "aula06.aula03",
        "peekOfCode": "n2 = 20\nresult = soma(n1, n2)\nprint(result)",
        "detail": "aula06.aula03",
        "documentation": {}
    },
    {
        "label": "result",
        "kind": 5,
        "importPath": "aula06.aula03",
        "description": "aula06.aula03",
        "peekOfCode": "result = soma(n1, n2)\nprint(result)",
        "detail": "aula06.aula03",
        "documentation": {}
    },
    {
        "label": "subtracao",
        "kind": 2,
        "importPath": "aula06.aula04",
        "description": "aula06.aula04",
        "peekOfCode": "def subtracao(n1, n2):\n    resultado = n1 - n2\n    return resultado\nv1 = 158\nv2 = 64\nr = subtracao(v1, v2)\nprint(r)",
        "detail": "aula06.aula04",
        "documentation": {}
    },
    {
        "label": "v1",
        "kind": 5,
        "importPath": "aula06.aula04",
        "description": "aula06.aula04",
        "peekOfCode": "v1 = 158\nv2 = 64\nr = subtracao(v1, v2)\nprint(r)",
        "detail": "aula06.aula04",
        "documentation": {}
    },
    {
        "label": "v2",
        "kind": 5,
        "importPath": "aula06.aula04",
        "description": "aula06.aula04",
        "peekOfCode": "v2 = 64\nr = subtracao(v1, v2)\nprint(r)",
        "detail": "aula06.aula04",
        "documentation": {}
    },
    {
        "label": "r",
        "kind": 5,
        "importPath": "aula06.aula04",
        "description": "aula06.aula04",
        "peekOfCode": "r = subtracao(v1, v2)\nprint(r)",
        "detail": "aula06.aula04",
        "documentation": {}
    },
    {
        "label": "multiplicacao",
        "kind": 2,
        "importPath": "aula06.aula05",
        "description": "aula06.aula05",
        "peekOfCode": "def multiplicacao(n1, n2, n3):\n    resultado = n1 * n2 * n3\n    return resultado\nv1 = 2\nv2 = 3\nv3 = 5\n#Argumentos nomeados\nr = multiplicacao(n3=v3, n2=v2, n1=v1)\nprint(r)",
        "detail": "aula06.aula05",
        "documentation": {}
    },
    {
        "label": "v1",
        "kind": 5,
        "importPath": "aula06.aula05",
        "description": "aula06.aula05",
        "peekOfCode": "v1 = 2\nv2 = 3\nv3 = 5\n#Argumentos nomeados\nr = multiplicacao(n3=v3, n2=v2, n1=v1)\nprint(r)",
        "detail": "aula06.aula05",
        "documentation": {}
    },
    {
        "label": "v2",
        "kind": 5,
        "importPath": "aula06.aula05",
        "description": "aula06.aula05",
        "peekOfCode": "v2 = 3\nv3 = 5\n#Argumentos nomeados\nr = multiplicacao(n3=v3, n2=v2, n1=v1)\nprint(r)",
        "detail": "aula06.aula05",
        "documentation": {}
    },
    {
        "label": "v3",
        "kind": 5,
        "importPath": "aula06.aula05",
        "description": "aula06.aula05",
        "peekOfCode": "v3 = 5\n#Argumentos nomeados\nr = multiplicacao(n3=v3, n2=v2, n1=v1)\nprint(r)",
        "detail": "aula06.aula05",
        "documentation": {}
    },
    {
        "label": "r",
        "kind": 5,
        "importPath": "aula06.aula05",
        "description": "aula06.aula05",
        "peekOfCode": "r = multiplicacao(n3=v3, n2=v2, n1=v1)\nprint(r)",
        "detail": "aula06.aula05",
        "documentation": {}
    },
    {
        "label": "create",
        "kind": 2,
        "importPath": "aula06.crud_pessoa",
        "description": "aula06.crud_pessoa",
        "peekOfCode": "def create(nome, sobrenome, idade):\n    global id\n    id = id + 1\n    pessoa = {'id': id, 'nome': nome, 'sobrenome': sobrenome, 'idade': idade}\n    lista_pessoas.append(pessoa)\n    return f'pessoa {nome} cadastrada com sucesso!'\ndef read_all():\n    return lista_pessoas\ndef read_by_id(id):\n    pessoa_encontrada = None",
        "detail": "aula06.crud_pessoa",
        "documentation": {}
    },
    {
        "label": "read_all",
        "kind": 2,
        "importPath": "aula06.crud_pessoa",
        "description": "aula06.crud_pessoa",
        "peekOfCode": "def read_all():\n    return lista_pessoas\ndef read_by_id(id):\n    pessoa_encontrada = None\n    for pessoa in lista_pessoas:\n        if pessoa ['id'] == id:\n            pessoa_encontrada = pessoa\n    return pessoa_encontrada\ndef update(pessoa):\n    elementos = len(lista_pessoas)",
        "detail": "aula06.crud_pessoa",
        "documentation": {}
    },
    {
        "label": "read_by_id",
        "kind": 2,
        "importPath": "aula06.crud_pessoa",
        "description": "aula06.crud_pessoa",
        "peekOfCode": "def read_by_id(id):\n    pessoa_encontrada = None\n    for pessoa in lista_pessoas:\n        if pessoa ['id'] == id:\n            pessoa_encontrada = pessoa\n    return pessoa_encontrada\ndef update(pessoa):\n    elementos = len(lista_pessoas)\n    for indice in range(0, elementos):   #for incremental\n        if lista_pessoas[indice]['id'] == pessoa ['id']:",
        "detail": "aula06.crud_pessoa",
        "documentation": {}
    },
    {
        "label": "update",
        "kind": 2,
        "importPath": "aula06.crud_pessoa",
        "description": "aula06.crud_pessoa",
        "peekOfCode": "def update(pessoa):\n    elementos = len(lista_pessoas)\n    for indice in range(0, elementos):   #for incremental\n        if lista_pessoas[indice]['id'] == pessoa ['id']:\n            lista_pessoas [indice] = pessoa\ndef delete(id):\n    elementos = len(lista_pessoas)\n    for indice in range(0, elementos):   #for incremental\n        if lista_pessoas[indice]['id'] == id:\n             del   lista_pessoas [indice]",
        "detail": "aula06.crud_pessoa",
        "documentation": {}
    },
    {
        "label": "delete",
        "kind": 2,
        "importPath": "aula06.crud_pessoa",
        "description": "aula06.crud_pessoa",
        "peekOfCode": "def delete(id):\n    elementos = len(lista_pessoas)\n    for indice in range(0, elementos):   #for incremental\n        if lista_pessoas[indice]['id'] == id:\n             del   lista_pessoas [indice]",
        "detail": "aula06.crud_pessoa",
        "documentation": {}
    },
    {
        "label": "lista_pessoas",
        "kind": 5,
        "importPath": "aula06.crud_pessoa",
        "description": "aula06.crud_pessoa",
        "peekOfCode": "lista_pessoas = []\nid = 0\ndef create(nome, sobrenome, idade):\n    global id\n    id = id + 1\n    pessoa = {'id': id, 'nome': nome, 'sobrenome': sobrenome, 'idade': idade}\n    lista_pessoas.append(pessoa)\n    return f'pessoa {nome} cadastrada com sucesso!'\ndef read_all():\n    return lista_pessoas",
        "detail": "aula06.crud_pessoa",
        "documentation": {}
    },
    {
        "label": "id",
        "kind": 5,
        "importPath": "aula06.crud_pessoa",
        "description": "aula06.crud_pessoa",
        "peekOfCode": "id = 0\ndef create(nome, sobrenome, idade):\n    global id\n    id = id + 1\n    pessoa = {'id': id, 'nome': nome, 'sobrenome': sobrenome, 'idade': idade}\n    lista_pessoas.append(pessoa)\n    return f'pessoa {nome} cadastrada com sucesso!'\ndef read_all():\n    return lista_pessoas\ndef read_by_id(id):",
        "detail": "aula06.crud_pessoa",
        "documentation": {}
    },
    {
        "label": "create",
        "kind": 2,
        "importPath": "aula06.crud_usuario",
        "description": "aula06.crud_usuario",
        "peekOfCode": "def create():\n    msg = 'cadastro com sucesso'\n    return msg\ndef read():\n    msg = 'usuario de ID = encontrado'\n    return msg\ndef read_all():\n    msg = 'listagem de usuario'\n    return msg\ndef update():",
        "detail": "aula06.crud_usuario",
        "documentation": {}
    },
    {
        "label": "read",
        "kind": 2,
        "importPath": "aula06.crud_usuario",
        "description": "aula06.crud_usuario",
        "peekOfCode": "def read():\n    msg = 'usuario de ID = encontrado'\n    return msg\ndef read_all():\n    msg = 'listagem de usuario'\n    return msg\ndef update():\n    msg = 'usuario alterado com sucesso'\n    return msg\ndef delet():",
        "detail": "aula06.crud_usuario",
        "documentation": {}
    },
    {
        "label": "read_all",
        "kind": 2,
        "importPath": "aula06.crud_usuario",
        "description": "aula06.crud_usuario",
        "peekOfCode": "def read_all():\n    msg = 'listagem de usuario'\n    return msg\ndef update():\n    msg = 'usuario alterado com sucesso'\n    return msg\ndef delet():\n    msg = 'usuario excluido com sucesso'\n    return msg",
        "detail": "aula06.crud_usuario",
        "documentation": {}
    },
    {
        "label": "update",
        "kind": 2,
        "importPath": "aula06.crud_usuario",
        "description": "aula06.crud_usuario",
        "peekOfCode": "def update():\n    msg = 'usuario alterado com sucesso'\n    return msg\ndef delet():\n    msg = 'usuario excluido com sucesso'\n    return msg",
        "detail": "aula06.crud_usuario",
        "documentation": {}
    },
    {
        "label": "delet",
        "kind": 2,
        "importPath": "aula06.crud_usuario",
        "description": "aula06.crud_usuario",
        "peekOfCode": "def delet():\n    msg = 'usuario excluido com sucesso'\n    return msg",
        "detail": "aula06.crud_usuario",
        "documentation": {}
    },
    {
        "label": "#C",
        "kind": 5,
        "importPath": "aula06.crud_usuario",
        "description": "aula06.crud_usuario",
        "peekOfCode": "#C = criar/cadastrar algo\n#R = ler/listar 1 ou mais dados\n#U = alterar/alterar o valor de um dado\n#D = deletar/apagar algum dado\n# => pep8\ndef create():\n    msg = 'cadastro com sucesso'\n    return msg\ndef read():\n    msg = 'usuario de ID = encontrado'",
        "detail": "aula06.crud_usuario",
        "documentation": {}
    },
    {
        "label": "#R",
        "kind": 5,
        "importPath": "aula06.crud_usuario",
        "description": "aula06.crud_usuario",
        "peekOfCode": "#R = ler/listar 1 ou mais dados\n#U = alterar/alterar o valor de um dado\n#D = deletar/apagar algum dado\n# => pep8\ndef create():\n    msg = 'cadastro com sucesso'\n    return msg\ndef read():\n    msg = 'usuario de ID = encontrado'\n    return msg",
        "detail": "aula06.crud_usuario",
        "documentation": {}
    },
    {
        "label": "#U",
        "kind": 5,
        "importPath": "aula06.crud_usuario",
        "description": "aula06.crud_usuario",
        "peekOfCode": "#U = alterar/alterar o valor de um dado\n#D = deletar/apagar algum dado\n# => pep8\ndef create():\n    msg = 'cadastro com sucesso'\n    return msg\ndef read():\n    msg = 'usuario de ID = encontrado'\n    return msg\ndef read_all():",
        "detail": "aula06.crud_usuario",
        "documentation": {}
    },
    {
        "label": "#D",
        "kind": 5,
        "importPath": "aula06.crud_usuario",
        "description": "aula06.crud_usuario",
        "peekOfCode": "#D = deletar/apagar algum dado\n# => pep8\ndef create():\n    msg = 'cadastro com sucesso'\n    return msg\ndef read():\n    msg = 'usuario de ID = encontrado'\n    return msg\ndef read_all():\n    msg = 'listagem de usuario'",
        "detail": "aula06.crud_usuario",
        "documentation": {}
    },
    {
        "label": "lista",
        "kind": 5,
        "importPath": "aula06.for_foreach",
        "description": "aula06.for_foreach",
        "peekOfCode": "lista = ['caio', 'fernando']\nfor p in lista:\n    print(p)\nfor n in range(0, (lista)):\n    print(lista(n))   #for incremental tradicional\n#remove  \nlista.remove('caio')\nprint(lista)\n#pop\ndado = lista.pop(0)",
        "detail": "aula06.for_foreach",
        "documentation": {}
    },
    {
        "label": "dado",
        "kind": 5,
        "importPath": "aula06.for_foreach",
        "description": "aula06.for_foreach",
        "peekOfCode": "dado = lista.pop(0)\nprint(lista)\nprint('Dado removido: '+ dado)\n#del\ndel lista(1)\nprint(lista)",
        "detail": "aula06.for_foreach",
        "documentation": {}
    },
    {
        "label": "lista",
        "kind": 5,
        "importPath": "aula06.main",
        "description": "aula06.main",
        "peekOfCode": "lista = read_all()\nfor p in lista:\n   print (p)\np = read_by_id(3)\nprint (p)\npessoa_alterada = {'id':3, 'nome':'Tonho', 'sobrenome': 'Da lua', 'idade': 98}\nupdate(pessoa_alterada)\nprint('Dados com a alteração')\nlista = read_all()\nfor p in lista:",
        "detail": "aula06.main",
        "documentation": {}
    },
    {
        "label": "p",
        "kind": 5,
        "importPath": "aula06.main",
        "description": "aula06.main",
        "peekOfCode": "p = read_by_id(3)\nprint (p)\npessoa_alterada = {'id':3, 'nome':'Tonho', 'sobrenome': 'Da lua', 'idade': 98}\nupdate(pessoa_alterada)\nprint('Dados com a alteração')\nlista = read_all()\nfor p in lista:\n    print(p)",
        "detail": "aula06.main",
        "documentation": {}
    },
    {
        "label": "pessoa_alterada",
        "kind": 5,
        "importPath": "aula06.main",
        "description": "aula06.main",
        "peekOfCode": "pessoa_alterada = {'id':3, 'nome':'Tonho', 'sobrenome': 'Da lua', 'idade': 98}\nupdate(pessoa_alterada)\nprint('Dados com a alteração')\nlista = read_all()\nfor p in lista:\n    print(p)",
        "detail": "aula06.main",
        "documentation": {}
    },
    {
        "label": "lista",
        "kind": 5,
        "importPath": "aula06.main",
        "description": "aula06.main",
        "peekOfCode": "lista = read_all()\nfor p in lista:\n    print(p)",
        "detail": "aula06.main",
        "documentation": {}
    },
    {
        "label": "lista",
        "kind": 5,
        "importPath": "exercicios.aula21",
        "description": "exercicios.aula21",
        "peekOfCode": "lista = [ nome, idade, anoletivo, materia, nota1, nota2, media]\nprint(lista)\nif media > 7:\n    print(\"a média é maior que 7.0\")\nelif media > 7:\n    print(\"a média é menor que 7.0\")  \nelse:\n    print(\"a média é exatamente 7.0\")  \npoli =\"=\"*20 \nprint(poli , \"média\" , poli)     ",
        "detail": "exercicios.aula21",
        "documentation": {}
    },
    {
        "label": "nome",
        "kind": 5,
        "importPath": "exercicios.aula22",
        "description": "exercicios.aula22",
        "peekOfCode": "nome = (input(\"digite seu nome\"))\naltura = float(input(\"digite sua altura em metros\"))\npeso = float(input(\"digite seu peso em quilogramas\"))\nimc = peso/(altura**2)\ncategoria = None\nif imc < 18.5:\n    categoria = \"abaixo de peso\"\nelif imc >= 24.9:\n    categoria = \"peso normal\"\nelif imc >= 20.9:",
        "detail": "exercicios.aula22",
        "documentation": {}
    },
    {
        "label": "altura",
        "kind": 5,
        "importPath": "exercicios.aula22",
        "description": "exercicios.aula22",
        "peekOfCode": "altura = float(input(\"digite sua altura em metros\"))\npeso = float(input(\"digite seu peso em quilogramas\"))\nimc = peso/(altura**2)\ncategoria = None\nif imc < 18.5:\n    categoria = \"abaixo de peso\"\nelif imc >= 24.9:\n    categoria = \"peso normal\"\nelif imc >= 20.9:\n    categoria = \"sobrepeso\"",
        "detail": "exercicios.aula22",
        "documentation": {}
    },
    {
        "label": "peso",
        "kind": 5,
        "importPath": "exercicios.aula22",
        "description": "exercicios.aula22",
        "peekOfCode": "peso = float(input(\"digite seu peso em quilogramas\"))\nimc = peso/(altura**2)\ncategoria = None\nif imc < 18.5:\n    categoria = \"abaixo de peso\"\nelif imc >= 24.9:\n    categoria = \"peso normal\"\nelif imc >= 20.9:\n    categoria = \"sobrepeso\"\nelif imc >= 30:",
        "detail": "exercicios.aula22",
        "documentation": {}
    },
    {
        "label": "imc",
        "kind": 5,
        "importPath": "exercicios.aula22",
        "description": "exercicios.aula22",
        "peekOfCode": "imc = peso/(altura**2)\ncategoria = None\nif imc < 18.5:\n    categoria = \"abaixo de peso\"\nelif imc >= 24.9:\n    categoria = \"peso normal\"\nelif imc >= 20.9:\n    categoria = \"sobrepeso\"\nelif imc >= 30:\n    categoria = \"obeso\"",
        "detail": "exercicios.aula22",
        "documentation": {}
    },
    {
        "label": "categoria",
        "kind": 5,
        "importPath": "exercicios.aula22",
        "description": "exercicios.aula22",
        "peekOfCode": "categoria = None\nif imc < 18.5:\n    categoria = \"abaixo de peso\"\nelif imc >= 24.9:\n    categoria = \"peso normal\"\nelif imc >= 20.9:\n    categoria = \"sobrepeso\"\nelif imc >= 30:\n    categoria = \"obeso\"\nprint(\"Olá\", nome, \"segundo os calculos do seu imc você está\", categoria)",
        "detail": "exercicios.aula22",
        "documentation": {}
    },
    {
        "label": "n1",
        "kind": 5,
        "importPath": "exercicios.aula23",
        "description": "exercicios.aula23",
        "peekOfCode": "n1 = input('digite seu nome')\nn2 = input('digite seu nome')\nn3 = input('digite seu nome')\nn4 = input('digite seu nome')\nn5 = input('digite seu nome')\nn6 = input('digite seu nome')\nlista = [n1, n2, n3, n4, n5, n6]\nfrom random import choice, shuffle\nshuffle(lista)\nsorteio = choice(lista)",
        "detail": "exercicios.aula23",
        "documentation": {}
    },
    {
        "label": "n2",
        "kind": 5,
        "importPath": "exercicios.aula23",
        "description": "exercicios.aula23",
        "peekOfCode": "n2 = input('digite seu nome')\nn3 = input('digite seu nome')\nn4 = input('digite seu nome')\nn5 = input('digite seu nome')\nn6 = input('digite seu nome')\nlista = [n1, n2, n3, n4, n5, n6]\nfrom random import choice, shuffle\nshuffle(lista)\nsorteio = choice(lista)\npoli = \"*\"*20",
        "detail": "exercicios.aula23",
        "documentation": {}
    },
    {
        "label": "n3",
        "kind": 5,
        "importPath": "exercicios.aula23",
        "description": "exercicios.aula23",
        "peekOfCode": "n3 = input('digite seu nome')\nn4 = input('digite seu nome')\nn5 = input('digite seu nome')\nn6 = input('digite seu nome')\nlista = [n1, n2, n3, n4, n5, n6]\nfrom random import choice, shuffle\nshuffle(lista)\nsorteio = choice(lista)\npoli = \"*\"*20\nif sorteio ==n1:",
        "detail": "exercicios.aula23",
        "documentation": {}
    },
    {
        "label": "n4",
        "kind": 5,
        "importPath": "exercicios.aula23",
        "description": "exercicios.aula23",
        "peekOfCode": "n4 = input('digite seu nome')\nn5 = input('digite seu nome')\nn6 = input('digite seu nome')\nlista = [n1, n2, n3, n4, n5, n6]\nfrom random import choice, shuffle\nshuffle(lista)\nsorteio = choice(lista)\npoli = \"*\"*20\nif sorteio ==n1:\n    print(f\"o nome sorteado foi {n1}\")",
        "detail": "exercicios.aula23",
        "documentation": {}
    },
    {
        "label": "n5",
        "kind": 5,
        "importPath": "exercicios.aula23",
        "description": "exercicios.aula23",
        "peekOfCode": "n5 = input('digite seu nome')\nn6 = input('digite seu nome')\nlista = [n1, n2, n3, n4, n5, n6]\nfrom random import choice, shuffle\nshuffle(lista)\nsorteio = choice(lista)\npoli = \"*\"*20\nif sorteio ==n1:\n    print(f\"o nome sorteado foi {n1}\")\nelif sorteio ==n2:",
        "detail": "exercicios.aula23",
        "documentation": {}
    },
    {
        "label": "n6",
        "kind": 5,
        "importPath": "exercicios.aula23",
        "description": "exercicios.aula23",
        "peekOfCode": "n6 = input('digite seu nome')\nlista = [n1, n2, n3, n4, n5, n6]\nfrom random import choice, shuffle\nshuffle(lista)\nsorteio = choice(lista)\npoli = \"*\"*20\nif sorteio ==n1:\n    print(f\"o nome sorteado foi {n1}\")\nelif sorteio ==n2:\n    print(f\"o nome sortedo foi {n2}\")",
        "detail": "exercicios.aula23",
        "documentation": {}
    },
    {
        "label": "lista",
        "kind": 5,
        "importPath": "exercicios.aula23",
        "description": "exercicios.aula23",
        "peekOfCode": "lista = [n1, n2, n3, n4, n5, n6]\nfrom random import choice, shuffle\nshuffle(lista)\nsorteio = choice(lista)\npoli = \"*\"*20\nif sorteio ==n1:\n    print(f\"o nome sorteado foi {n1}\")\nelif sorteio ==n2:\n    print(f\"o nome sortedo foi {n2}\")\nelif sorteio ==n3:",
        "detail": "exercicios.aula23",
        "documentation": {}
    },
    {
        "label": "sorteio",
        "kind": 5,
        "importPath": "exercicios.aula23",
        "description": "exercicios.aula23",
        "peekOfCode": "sorteio = choice(lista)\npoli = \"*\"*20\nif sorteio ==n1:\n    print(f\"o nome sorteado foi {n1}\")\nelif sorteio ==n2:\n    print(f\"o nome sortedo foi {n2}\")\nelif sorteio ==n3:\n    print(f\"o nome sortedo foi {n3}\")\nelif sorteio ==n4:\n    print(f\"o nome sortedo foi {n4}\")",
        "detail": "exercicios.aula23",
        "documentation": {}
    },
    {
        "label": "poli",
        "kind": 5,
        "importPath": "exercicios.aula23",
        "description": "exercicios.aula23",
        "peekOfCode": "poli = \"*\"*20\nif sorteio ==n1:\n    print(f\"o nome sorteado foi {n1}\")\nelif sorteio ==n2:\n    print(f\"o nome sortedo foi {n2}\")\nelif sorteio ==n3:\n    print(f\"o nome sortedo foi {n3}\")\nelif sorteio ==n4:\n    print(f\"o nome sortedo foi {n4}\")\nelif sorteio ==n5:",
        "detail": "exercicios.aula23",
        "documentation": {}
    },
    {
        "label": "nome",
        "kind": 5,
        "importPath": "exercicios.aula24",
        "description": "exercicios.aula24",
        "peekOfCode": "nome = input(\"digite seu nome\")\nviagem1 = input(\"digite o local de sua primeira viagem\")\nviagem2 = input(\"digite o local de sua segunda viagem\")\nviagem3 = input(\"digite o local de sua terceira viagem\")\nviagem4 = input(\"digite o local de sua quarta viagem\")\nviagem5 = input(\"digite o local de sua quinta viagem\")\nviagem6 = input(\"digite o local de sua quinta viagem\")\nlista = [viagem1, viagem2, viagem3, viagem4, viagem5, viagem6]\nprint(lista)",
        "detail": "exercicios.aula24",
        "documentation": {}
    },
    {
        "label": "viagem1",
        "kind": 5,
        "importPath": "exercicios.aula24",
        "description": "exercicios.aula24",
        "peekOfCode": "viagem1 = input(\"digite o local de sua primeira viagem\")\nviagem2 = input(\"digite o local de sua segunda viagem\")\nviagem3 = input(\"digite o local de sua terceira viagem\")\nviagem4 = input(\"digite o local de sua quarta viagem\")\nviagem5 = input(\"digite o local de sua quinta viagem\")\nviagem6 = input(\"digite o local de sua quinta viagem\")\nlista = [viagem1, viagem2, viagem3, viagem4, viagem5, viagem6]\nprint(lista)",
        "detail": "exercicios.aula24",
        "documentation": {}
    },
    {
        "label": "viagem2",
        "kind": 5,
        "importPath": "exercicios.aula24",
        "description": "exercicios.aula24",
        "peekOfCode": "viagem2 = input(\"digite o local de sua segunda viagem\")\nviagem3 = input(\"digite o local de sua terceira viagem\")\nviagem4 = input(\"digite o local de sua quarta viagem\")\nviagem5 = input(\"digite o local de sua quinta viagem\")\nviagem6 = input(\"digite o local de sua quinta viagem\")\nlista = [viagem1, viagem2, viagem3, viagem4, viagem5, viagem6]\nprint(lista)\npoli = \"*\"*20\nfrom random import choice, shuffle",
        "detail": "exercicios.aula24",
        "documentation": {}
    },
    {
        "label": "viagem3",
        "kind": 5,
        "importPath": "exercicios.aula24",
        "description": "exercicios.aula24",
        "peekOfCode": "viagem3 = input(\"digite o local de sua terceira viagem\")\nviagem4 = input(\"digite o local de sua quarta viagem\")\nviagem5 = input(\"digite o local de sua quinta viagem\")\nviagem6 = input(\"digite o local de sua quinta viagem\")\nlista = [viagem1, viagem2, viagem3, viagem4, viagem5, viagem6]\nprint(lista)\npoli = \"*\"*20\nfrom random import choice, shuffle\nshuffle(lista)\nsorteio = choice(lista)",
        "detail": "exercicios.aula24",
        "documentation": {}
    },
    {
        "label": "viagem4",
        "kind": 5,
        "importPath": "exercicios.aula24",
        "description": "exercicios.aula24",
        "peekOfCode": "viagem4 = input(\"digite o local de sua quarta viagem\")\nviagem5 = input(\"digite o local de sua quinta viagem\")\nviagem6 = input(\"digite o local de sua quinta viagem\")\nlista = [viagem1, viagem2, viagem3, viagem4, viagem5, viagem6]\nprint(lista)\npoli = \"*\"*20\nfrom random import choice, shuffle\nshuffle(lista)\nsorteio = choice(lista)\nif sorteio ==viagem1:",
        "detail": "exercicios.aula24",
        "documentation": {}
    },
    {
        "label": "viagem5",
        "kind": 5,
        "importPath": "exercicios.aula24",
        "description": "exercicios.aula24",
        "peekOfCode": "viagem5 = input(\"digite o local de sua quinta viagem\")\nviagem6 = input(\"digite o local de sua quinta viagem\")\nlista = [viagem1, viagem2, viagem3, viagem4, viagem5, viagem6]\nprint(lista)\npoli = \"*\"*20\nfrom random import choice, shuffle\nshuffle(lista)\nsorteio = choice(lista)\nif sorteio ==viagem1:\n    print(f\"seu destino é : {viagem1}\")",
        "detail": "exercicios.aula24",
        "documentation": {}
    },
    {
        "label": "viagem6",
        "kind": 5,
        "importPath": "exercicios.aula24",
        "description": "exercicios.aula24",
        "peekOfCode": "viagem6 = input(\"digite o local de sua quinta viagem\")\nlista = [viagem1, viagem2, viagem3, viagem4, viagem5, viagem6]\nprint(lista)\npoli = \"*\"*20\nfrom random import choice, shuffle\nshuffle(lista)\nsorteio = choice(lista)\nif sorteio ==viagem1:\n    print(f\"seu destino é : {viagem1}\")\nelif sorteio ==viagem2:",
        "detail": "exercicios.aula24",
        "documentation": {}
    },
    {
        "label": "lista",
        "kind": 5,
        "importPath": "exercicios.aula24",
        "description": "exercicios.aula24",
        "peekOfCode": "lista = [viagem1, viagem2, viagem3, viagem4, viagem5, viagem6]\nprint(lista)\npoli = \"*\"*20\nfrom random import choice, shuffle\nshuffle(lista)\nsorteio = choice(lista)\nif sorteio ==viagem1:\n    print(f\"seu destino é : {viagem1}\")\nelif sorteio ==viagem2:\n    print(f\"seu destino é : {viagem2}\")",
        "detail": "exercicios.aula24",
        "documentation": {}
    },
    {
        "label": "poli",
        "kind": 5,
        "importPath": "exercicios.aula24",
        "description": "exercicios.aula24",
        "peekOfCode": "poli = \"*\"*20\nfrom random import choice, shuffle\nshuffle(lista)\nsorteio = choice(lista)\nif sorteio ==viagem1:\n    print(f\"seu destino é : {viagem1}\")\nelif sorteio ==viagem2:\n    print(f\"seu destino é : {viagem2}\")\nelif sorteio ==viagem3:\n    print(f\"seu destino é : {viagem3}\")",
        "detail": "exercicios.aula24",
        "documentation": {}
    },
    {
        "label": "sorteio",
        "kind": 5,
        "importPath": "exercicios.aula24",
        "description": "exercicios.aula24",
        "peekOfCode": "sorteio = choice(lista)\nif sorteio ==viagem1:\n    print(f\"seu destino é : {viagem1}\")\nelif sorteio ==viagem2:\n    print(f\"seu destino é : {viagem2}\")\nelif sorteio ==viagem3:\n    print(f\"seu destino é : {viagem3}\")\nelif sorteio ==viagem4:\n    print(f\"seu destino é : {viagem4}\")\nelif sorteio ==viagem5:",
        "detail": "exercicios.aula24",
        "documentation": {}
    },
    {
        "label": "nome1",
        "kind": 5,
        "importPath": "exercicios.aula25",
        "description": "exercicios.aula25",
        "peekOfCode": "nome1 = input(\"digite seu nome\")\nidade1 = float(input(\"dgite uma idade entre 18 até 50 anos\"))\nnome2 = input(\"digite seu nome\")\nidade2 = float(input(\"dgite uma idade entre 18 até 50 anos\"))\nnome3 = input(\"digite seu nome\")\nidade3 = float(input(\"dgite uma idade entre 18 até 50 anos\"))\nmedia_idade = (idade1 + idade2 + idade3)/3\nidade = (idade1, idade2, idade3)\nnomes = [nome1, nome2, nome3]\ncategoria = None",
        "detail": "exercicios.aula25",
        "documentation": {}
    },
    {
        "label": "idade1",
        "kind": 5,
        "importPath": "exercicios.aula25",
        "description": "exercicios.aula25",
        "peekOfCode": "idade1 = float(input(\"dgite uma idade entre 18 até 50 anos\"))\nnome2 = input(\"digite seu nome\")\nidade2 = float(input(\"dgite uma idade entre 18 até 50 anos\"))\nnome3 = input(\"digite seu nome\")\nidade3 = float(input(\"dgite uma idade entre 18 até 50 anos\"))\nmedia_idade = (idade1 + idade2 + idade3)/3\nidade = (idade1, idade2, idade3)\nnomes = [nome1, nome2, nome3]\ncategoria = None\nif media_idade < 18:",
        "detail": "exercicios.aula25",
        "documentation": {}
    },
    {
        "label": "nome2",
        "kind": 5,
        "importPath": "exercicios.aula25",
        "description": "exercicios.aula25",
        "peekOfCode": "nome2 = input(\"digite seu nome\")\nidade2 = float(input(\"dgite uma idade entre 18 até 50 anos\"))\nnome3 = input(\"digite seu nome\")\nidade3 = float(input(\"dgite uma idade entre 18 até 50 anos\"))\nmedia_idade = (idade1 + idade2 + idade3)/3\nidade = (idade1, idade2, idade3)\nnomes = [nome1, nome2, nome3]\ncategoria = None\nif media_idade < 18:\n    ctegoria = \"menor de 18\"",
        "detail": "exercicios.aula25",
        "documentation": {}
    },
    {
        "label": "idade2",
        "kind": 5,
        "importPath": "exercicios.aula25",
        "description": "exercicios.aula25",
        "peekOfCode": "idade2 = float(input(\"dgite uma idade entre 18 até 50 anos\"))\nnome3 = input(\"digite seu nome\")\nidade3 = float(input(\"dgite uma idade entre 18 até 50 anos\"))\nmedia_idade = (idade1 + idade2 + idade3)/3\nidade = (idade1, idade2, idade3)\nnomes = [nome1, nome2, nome3]\ncategoria = None\nif media_idade < 18:\n    ctegoria = \"menor de 18\"\nelif media_idade >= 18 <30:",
        "detail": "exercicios.aula25",
        "documentation": {}
    },
    {
        "label": "nome3",
        "kind": 5,
        "importPath": "exercicios.aula25",
        "description": "exercicios.aula25",
        "peekOfCode": "nome3 = input(\"digite seu nome\")\nidade3 = float(input(\"dgite uma idade entre 18 até 50 anos\"))\nmedia_idade = (idade1 + idade2 + idade3)/3\nidade = (idade1, idade2, idade3)\nnomes = [nome1, nome2, nome3]\ncategoria = None\nif media_idade < 18:\n    ctegoria = \"menor de 18\"\nelif media_idade >= 18 <30:\n    categoria = \"entre 18 e 29\"",
        "detail": "exercicios.aula25",
        "documentation": {}
    },
    {
        "label": "idade3",
        "kind": 5,
        "importPath": "exercicios.aula25",
        "description": "exercicios.aula25",
        "peekOfCode": "idade3 = float(input(\"dgite uma idade entre 18 até 50 anos\"))\nmedia_idade = (idade1 + idade2 + idade3)/3\nidade = (idade1, idade2, idade3)\nnomes = [nome1, nome2, nome3]\ncategoria = None\nif media_idade < 18:\n    ctegoria = \"menor de 18\"\nelif media_idade >= 18 <30:\n    categoria = \"entre 18 e 29\"\nelif media_idade >= 30 <40:",
        "detail": "exercicios.aula25",
        "documentation": {}
    },
    {
        "label": "media_idade",
        "kind": 5,
        "importPath": "exercicios.aula25",
        "description": "exercicios.aula25",
        "peekOfCode": "media_idade = (idade1 + idade2 + idade3)/3\nidade = (idade1, idade2, idade3)\nnomes = [nome1, nome2, nome3]\ncategoria = None\nif media_idade < 18:\n    ctegoria = \"menor de 18\"\nelif media_idade >= 18 <30:\n    categoria = \"entre 18 e 29\"\nelif media_idade >= 30 <40:\n    categoria = \"entre 30 e 39\"",
        "detail": "exercicios.aula25",
        "documentation": {}
    },
    {
        "label": "idade",
        "kind": 5,
        "importPath": "exercicios.aula25",
        "description": "exercicios.aula25",
        "peekOfCode": "idade = (idade1, idade2, idade3)\nnomes = [nome1, nome2, nome3]\ncategoria = None\nif media_idade < 18:\n    ctegoria = \"menor de 18\"\nelif media_idade >= 18 <30:\n    categoria = \"entre 18 e 29\"\nelif media_idade >= 30 <40:\n    categoria = \"entre 30 e 39\"\nelif media_idade >=40 <=50:",
        "detail": "exercicios.aula25",
        "documentation": {}
    },
    {
        "label": "nomes",
        "kind": 5,
        "importPath": "exercicios.aula25",
        "description": "exercicios.aula25",
        "peekOfCode": "nomes = [nome1, nome2, nome3]\ncategoria = None\nif media_idade < 18:\n    ctegoria = \"menor de 18\"\nelif media_idade >= 18 <30:\n    categoria = \"entre 18 e 29\"\nelif media_idade >= 30 <40:\n    categoria = \"entre 30 e 39\"\nelif media_idade >=40 <=50:\n    categoria = \"entre 40 e 50\"",
        "detail": "exercicios.aula25",
        "documentation": {}
    },
    {
        "label": "categoria",
        "kind": 5,
        "importPath": "exercicios.aula25",
        "description": "exercicios.aula25",
        "peekOfCode": "categoria = None\nif media_idade < 18:\n    ctegoria = \"menor de 18\"\nelif media_idade >= 18 <30:\n    categoria = \"entre 18 e 29\"\nelif media_idade >= 30 <40:\n    categoria = \"entre 30 e 39\"\nelif media_idade >=40 <=50:\n    categoria = \"entre 40 e 50\"\nprint(\"A média das idades é\", categoria)",
        "detail": "exercicios.aula25",
        "documentation": {}
    },
    {
        "label": "comisao",
        "kind": 5,
        "importPath": "modulo01.aula07",
        "description": "modulo01.aula07",
        "peekOfCode": "comisao = 54765476325452378428734687236\n#boleano true false\nverdadeiro : bool = False\nfalso = True\n#flutuante numero com casas decimais\nslario : = open('myfile.txt', 'w') = 2500.00",
        "detail": "modulo01.aula07",
        "documentation": {}
    },
    {
        "label": "falso",
        "kind": 5,
        "importPath": "modulo01.aula07",
        "description": "modulo01.aula07",
        "peekOfCode": "falso = True\n#flutuante numero com casas decimais\nslario : = open('myfile.txt', 'w') = 2500.00",
        "detail": "modulo01.aula07",
        "documentation": {}
    },
    {
        "label": "validador",
        "kind": 5,
        "importPath": "modulo01.aula08",
        "description": "modulo01.aula08",
        "peekOfCode": "validador = True\nidade = int(input(\"digite sua idade >> \"))\n#igual a 18\nvalidador = (idade == 18)\nprint(f\"a idade é igual a 18? {validador}\")\n#diferente de 18\nvalidador = (idade != 18)\nprint(f\"a idade é diferente de 18? {validador}\")\nvalidador = ( idade > 18)\nprint(f\"a idade é maior de 18? {validador}\")",
        "detail": "modulo01.aula08",
        "documentation": {}
    },
    {
        "label": "idade",
        "kind": 5,
        "importPath": "modulo01.aula08",
        "description": "modulo01.aula08",
        "peekOfCode": "idade = int(input(\"digite sua idade >> \"))\n#igual a 18\nvalidador = (idade == 18)\nprint(f\"a idade é igual a 18? {validador}\")\n#diferente de 18\nvalidador = (idade != 18)\nprint(f\"a idade é diferente de 18? {validador}\")\nvalidador = ( idade > 18)\nprint(f\"a idade é maior de 18? {validador}\")\nvalidador = ( idade < 18)",
        "detail": "modulo01.aula08",
        "documentation": {}
    },
    {
        "label": "validador",
        "kind": 5,
        "importPath": "modulo01.aula08",
        "description": "modulo01.aula08",
        "peekOfCode": "validador = (idade == 18)\nprint(f\"a idade é igual a 18? {validador}\")\n#diferente de 18\nvalidador = (idade != 18)\nprint(f\"a idade é diferente de 18? {validador}\")\nvalidador = ( idade > 18)\nprint(f\"a idade é maior de 18? {validador}\")\nvalidador = ( idade < 18)\nprint(f\"a idade é menor que 18? {validador}\")\nvalidador = (idade >= 18)",
        "detail": "modulo01.aula08",
        "documentation": {}
    },
    {
        "label": "validador",
        "kind": 5,
        "importPath": "modulo01.aula08",
        "description": "modulo01.aula08",
        "peekOfCode": "validador = (idade != 18)\nprint(f\"a idade é diferente de 18? {validador}\")\nvalidador = ( idade > 18)\nprint(f\"a idade é maior de 18? {validador}\")\nvalidador = ( idade < 18)\nprint(f\"a idade é menor que 18? {validador}\")\nvalidador = (idade >= 18)\nprint(f\"a idade é maior ou igual a 18? {validador}\")\nvalidador = (idade <= 18)\nprint(f\"a idade é menor ou igula a 18? {validador}\")",
        "detail": "modulo01.aula08",
        "documentation": {}
    },
    {
        "label": "validador",
        "kind": 5,
        "importPath": "modulo01.aula08",
        "description": "modulo01.aula08",
        "peekOfCode": "validador = ( idade > 18)\nprint(f\"a idade é maior de 18? {validador}\")\nvalidador = ( idade < 18)\nprint(f\"a idade é menor que 18? {validador}\")\nvalidador = (idade >= 18)\nprint(f\"a idade é maior ou igual a 18? {validador}\")\nvalidador = (idade <= 18)\nprint(f\"a idade é menor ou igula a 18? {validador}\")",
        "detail": "modulo01.aula08",
        "documentation": {}
    },
    {
        "label": "validador",
        "kind": 5,
        "importPath": "modulo01.aula08",
        "description": "modulo01.aula08",
        "peekOfCode": "validador = ( idade < 18)\nprint(f\"a idade é menor que 18? {validador}\")\nvalidador = (idade >= 18)\nprint(f\"a idade é maior ou igual a 18? {validador}\")\nvalidador = (idade <= 18)\nprint(f\"a idade é menor ou igula a 18? {validador}\")",
        "detail": "modulo01.aula08",
        "documentation": {}
    },
    {
        "label": "validador",
        "kind": 5,
        "importPath": "modulo01.aula08",
        "description": "modulo01.aula08",
        "peekOfCode": "validador = (idade >= 18)\nprint(f\"a idade é maior ou igual a 18? {validador}\")\nvalidador = (idade <= 18)\nprint(f\"a idade é menor ou igula a 18? {validador}\")",
        "detail": "modulo01.aula08",
        "documentation": {}
    },
    {
        "label": "validador",
        "kind": 5,
        "importPath": "modulo01.aula08",
        "description": "modulo01.aula08",
        "peekOfCode": "validador = (idade <= 18)\nprint(f\"a idade é menor ou igula a 18? {validador}\")",
        "detail": "modulo01.aula08",
        "documentation": {}
    },
    {
        "label": "n1",
        "kind": 5,
        "importPath": "modulo01.aula10",
        "description": "modulo01.aula10",
        "peekOfCode": "n1 =   int(input(\"digite o primeiro numero\"))\nn2 =   int(input(\"digite o segundo numero\"))\nsoma = n1 + n2\nprint(f'''\n      o resultado da soma foi {soma}\n      o primeiro numero digitado foi {n1}\n      o segundo numero digitado foi {n2}\n      ''')",
        "detail": "modulo01.aula10",
        "documentation": {}
    },
    {
        "label": "n2",
        "kind": 5,
        "importPath": "modulo01.aula10",
        "description": "modulo01.aula10",
        "peekOfCode": "n2 =   int(input(\"digite o segundo numero\"))\nsoma = n1 + n2\nprint(f'''\n      o resultado da soma foi {soma}\n      o primeiro numero digitado foi {n1}\n      o segundo numero digitado foi {n2}\n      ''')",
        "detail": "modulo01.aula10",
        "documentation": {}
    },
    {
        "label": "soma",
        "kind": 5,
        "importPath": "modulo01.aula10",
        "description": "modulo01.aula10",
        "peekOfCode": "soma = n1 + n2\nprint(f'''\n      o resultado da soma foi {soma}\n      o primeiro numero digitado foi {n1}\n      o segundo numero digitado foi {n2}\n      ''')",
        "detail": "modulo01.aula10",
        "documentation": {}
    },
    {
        "label": "n1",
        "kind": 5,
        "importPath": "modulo01.aula11",
        "description": "modulo01.aula11",
        "peekOfCode": "n1 = int(input(\"digite o primeiro numero\"))\nn2 = float(input(\"digite o segundo numero\"))\nsoma = n1 + n2\nprint(\"o tipo primitivo da variavel n1 é\", type(n1))\nprint(\"o tipo primitivo da variavel n2 é\", type(n2))",
        "detail": "modulo01.aula11",
        "documentation": {}
    },
    {
        "label": "n2",
        "kind": 5,
        "importPath": "modulo01.aula11",
        "description": "modulo01.aula11",
        "peekOfCode": "n2 = float(input(\"digite o segundo numero\"))\nsoma = n1 + n2\nprint(\"o tipo primitivo da variavel n1 é\", type(n1))\nprint(\"o tipo primitivo da variavel n2 é\", type(n2))",
        "detail": "modulo01.aula11",
        "documentation": {}
    },
    {
        "label": "soma",
        "kind": 5,
        "importPath": "modulo01.aula11",
        "description": "modulo01.aula11",
        "peekOfCode": "soma = n1 + n2\nprint(\"o tipo primitivo da variavel n1 é\", type(n1))\nprint(\"o tipo primitivo da variavel n2 é\", type(n2))",
        "detail": "modulo01.aula11",
        "documentation": {}
    },
    {
        "label": "#soma",
        "kind": 5,
        "importPath": "modulo01.aula12",
        "description": "modulo01.aula12",
        "peekOfCode": "#soma = 10 + 10\n#print(soma)\nn1 = int(input(\"digite um numero\"))\nn2 = int(input(\"digite um numero\"))\nn3 = int(input(\"digite um numero\"))\nn4 = int(input(\"digite um numero\"))\nsoma = n1 + n2 + n3 + n4\nprint(f''' \no valor da primeira variavel é {n1}\no valor da segunda variavel variavel é {n2}      ",
        "detail": "modulo01.aula12",
        "documentation": {}
    },
    {
        "label": "n1",
        "kind": 5,
        "importPath": "modulo01.aula12",
        "description": "modulo01.aula12",
        "peekOfCode": "n1 = int(input(\"digite um numero\"))\nn2 = int(input(\"digite um numero\"))\nn3 = int(input(\"digite um numero\"))\nn4 = int(input(\"digite um numero\"))\nsoma = n1 + n2 + n3 + n4\nprint(f''' \no valor da primeira variavel é {n1}\no valor da segunda variavel variavel é {n2}      \no valor da terceira variavel é {n3}      \no valor da quarta variavel é {n4}      ",
        "detail": "modulo01.aula12",
        "documentation": {}
    },
    {
        "label": "n2",
        "kind": 5,
        "importPath": "modulo01.aula12",
        "description": "modulo01.aula12",
        "peekOfCode": "n2 = int(input(\"digite um numero\"))\nn3 = int(input(\"digite um numero\"))\nn4 = int(input(\"digite um numero\"))\nsoma = n1 + n2 + n3 + n4\nprint(f''' \no valor da primeira variavel é {n1}\no valor da segunda variavel variavel é {n2}      \no valor da terceira variavel é {n3}      \no valor da quarta variavel é {n4}      \n ''')",
        "detail": "modulo01.aula12",
        "documentation": {}
    },
    {
        "label": "n3",
        "kind": 5,
        "importPath": "modulo01.aula12",
        "description": "modulo01.aula12",
        "peekOfCode": "n3 = int(input(\"digite um numero\"))\nn4 = int(input(\"digite um numero\"))\nsoma = n1 + n2 + n3 + n4\nprint(f''' \no valor da primeira variavel é {n1}\no valor da segunda variavel variavel é {n2}      \no valor da terceira variavel é {n3}      \no valor da quarta variavel é {n4}      \n ''')",
        "detail": "modulo01.aula12",
        "documentation": {}
    },
    {
        "label": "n4",
        "kind": 5,
        "importPath": "modulo01.aula12",
        "description": "modulo01.aula12",
        "peekOfCode": "n4 = int(input(\"digite um numero\"))\nsoma = n1 + n2 + n3 + n4\nprint(f''' \no valor da primeira variavel é {n1}\no valor da segunda variavel variavel é {n2}      \no valor da terceira variavel é {n3}      \no valor da quarta variavel é {n4}      \n ''')",
        "detail": "modulo01.aula12",
        "documentation": {}
    },
    {
        "label": "soma",
        "kind": 5,
        "importPath": "modulo01.aula12",
        "description": "modulo01.aula12",
        "peekOfCode": "soma = n1 + n2 + n3 + n4\nprint(f''' \no valor da primeira variavel é {n1}\no valor da segunda variavel variavel é {n2}      \no valor da terceira variavel é {n3}      \no valor da quarta variavel é {n4}      \n ''')",
        "detail": "modulo01.aula12",
        "documentation": {}
    },
    {
        "label": "texte",
        "kind": 5,
        "importPath": "modulo01.aula13",
        "description": "modulo01.aula13",
        "peekOfCode": "texte = input('digite qualquer coisa')\n#função condição com responsabilidade unica\nprint(\"tem espaço?\", texte.isspace())\nprint(\"contem caracter numerico?\", texte.isnumeric())\nprint(\"contem caracter alfabetico?\", texte.isalpha())\nprint(\"contem caracter alfanumerico?\", texte.isalnum())",
        "detail": "modulo01.aula13",
        "documentation": {}
    },
    {
        "label": "nome",
        "kind": 5,
        "importPath": "modulo01.aula14",
        "description": "modulo01.aula14",
        "peekOfCode": "nome = input(\"digite seu nome\")\nidade = int(input(\"digite sua idade\"))\ncpf = input(\"digite seu cpf\")\n#polimorfismo o quanto um operador matematico\n# exerce uma alteração quantica a uma variavel ou um valor\nhastag = \"=\"*20\nprint(hastag , \"menu\", hastag)\nprint(nome)\nprint(idade)\nprint(cpf)",
        "detail": "modulo01.aula14",
        "documentation": {}
    },
    {
        "label": "idade",
        "kind": 5,
        "importPath": "modulo01.aula14",
        "description": "modulo01.aula14",
        "peekOfCode": "idade = int(input(\"digite sua idade\"))\ncpf = input(\"digite seu cpf\")\n#polimorfismo o quanto um operador matematico\n# exerce uma alteração quantica a uma variavel ou um valor\nhastag = \"=\"*20\nprint(hastag , \"menu\", hastag)\nprint(nome)\nprint(idade)\nprint(cpf)",
        "detail": "modulo01.aula14",
        "documentation": {}
    },
    {
        "label": "cpf",
        "kind": 5,
        "importPath": "modulo01.aula14",
        "description": "modulo01.aula14",
        "peekOfCode": "cpf = input(\"digite seu cpf\")\n#polimorfismo o quanto um operador matematico\n# exerce uma alteração quantica a uma variavel ou um valor\nhastag = \"=\"*20\nprint(hastag , \"menu\", hastag)\nprint(nome)\nprint(idade)\nprint(cpf)",
        "detail": "modulo01.aula14",
        "documentation": {}
    },
    {
        "label": "hastag",
        "kind": 5,
        "importPath": "modulo01.aula14",
        "description": "modulo01.aula14",
        "peekOfCode": "hastag = \"=\"*20\nprint(hastag , \"menu\", hastag)\nprint(nome)\nprint(idade)\nprint(cpf)",
        "detail": "modulo01.aula14",
        "documentation": {}
    },
    {
        "label": "n1",
        "kind": 5,
        "importPath": "modulo01.aula15",
        "description": "modulo01.aula15",
        "peekOfCode": "n1 = float(input(\"digite o primeiro numero \"))\nn2 = float(input(\"digite o numero\"))\n#procedencia aritimetica\n#nota = (n1 + n2) /2\n#faça um print com intepolação de string\n#exibindo o valor digitado na primeiras variavel\n#depois exibindo o valor digitado na segunda variavel\n#depois o valor total da nota\nprint(f''' \no valor da primeiro variavel é {n1}",
        "detail": "modulo01.aula15",
        "documentation": {}
    },
    {
        "label": "n2",
        "kind": 5,
        "importPath": "modulo01.aula15",
        "description": "modulo01.aula15",
        "peekOfCode": "n2 = float(input(\"digite o numero\"))\n#procedencia aritimetica\n#nota = (n1 + n2) /2\n#faça um print com intepolação de string\n#exibindo o valor digitado na primeiras variavel\n#depois exibindo o valor digitado na segunda variavel\n#depois o valor total da nota\nprint(f''' \no valor da primeiro variavel é {n1}\no valor da segunda variavel é {n2} ",
        "detail": "modulo01.aula15",
        "documentation": {}
    },
    {
        "label": "#nota",
        "kind": 5,
        "importPath": "modulo01.aula15",
        "description": "modulo01.aula15",
        "peekOfCode": "#nota = (n1 + n2) /2\n#faça um print com intepolação de string\n#exibindo o valor digitado na primeiras variavel\n#depois exibindo o valor digitado na segunda variavel\n#depois o valor total da nota\nprint(f''' \no valor da primeiro variavel é {n1}\no valor da segunda variavel é {n2} \no valor da nota = {nota} \n      ''')",
        "detail": "modulo01.aula15",
        "documentation": {}
    },
    {
        "label": "num",
        "kind": 5,
        "importPath": "modulo01.aula16",
        "description": "modulo01.aula16",
        "peekOfCode": "num = int(input(\"digite o numero que deseja saber o valor da tabuada\"))\nprint(\"{} x {} = {}\" .format(num, 1, num*1))\nprint(\"{} x {} = {}\" .format(num, 2, num*2))\nprint(\"{} x {} = {}\" .format(num, 3, num*3))\nprint(\"{} x {} = {}\" .format(num, 4, num*4))\nprint(\"{} x {} = {}\" .format(num, 5, num*5))\nprint(\"{} x {} = {}\" .format(num, 6, num*6))\nprint(\"{} x {} = {}\" .format(num, 7, num*7))\nprint(\"{} x {} = {}\" .format(num, 8, num*8))\nprint(\"{} x {} = {}\" .format(num, 9, num*9))",
        "detail": "modulo01.aula16",
        "documentation": {}
    },
    {
        "label": "#heterogeneso",
        "kind": 5,
        "importPath": "modulo01.aula17",
        "description": "modulo01.aula17",
        "peekOfCode": "#heterogeneso = valores diferentes (tipos primitivos diferentes)\n#homogeneos = valores iguais (tipos primitivos iguais)\nnome = 'a'\nidade = 0\nsalario = 1500.0\n#heterogeneos\nlista = [nome, idade, salario]\nprint(lista)",
        "detail": "modulo01.aula17",
        "documentation": {}
    },
    {
        "label": "#homogeneos",
        "kind": 5,
        "importPath": "modulo01.aula17",
        "description": "modulo01.aula17",
        "peekOfCode": "#homogeneos = valores iguais (tipos primitivos iguais)\nnome = 'a'\nidade = 0\nsalario = 1500.0\n#heterogeneos\nlista = [nome, idade, salario]\nprint(lista)",
        "detail": "modulo01.aula17",
        "documentation": {}
    },
    {
        "label": "nome",
        "kind": 5,
        "importPath": "modulo01.aula17",
        "description": "modulo01.aula17",
        "peekOfCode": "nome = 'a'\nidade = 0\nsalario = 1500.0\n#heterogeneos\nlista = [nome, idade, salario]\nprint(lista)",
        "detail": "modulo01.aula17",
        "documentation": {}
    },
    {
        "label": "idade",
        "kind": 5,
        "importPath": "modulo01.aula17",
        "description": "modulo01.aula17",
        "peekOfCode": "idade = 0\nsalario = 1500.0\n#heterogeneos\nlista = [nome, idade, salario]\nprint(lista)",
        "detail": "modulo01.aula17",
        "documentation": {}
    },
    {
        "label": "salario",
        "kind": 5,
        "importPath": "modulo01.aula17",
        "description": "modulo01.aula17",
        "peekOfCode": "salario = 1500.0\n#heterogeneos\nlista = [nome, idade, salario]\nprint(lista)",
        "detail": "modulo01.aula17",
        "documentation": {}
    },
    {
        "label": "lista",
        "kind": 5,
        "importPath": "modulo01.aula17",
        "description": "modulo01.aula17",
        "peekOfCode": "lista = [nome, idade, salario]\nprint(lista)",
        "detail": "modulo01.aula17",
        "documentation": {}
    },
    {
        "label": "n1",
        "kind": 5,
        "importPath": "modulo01.aula18",
        "description": "modulo01.aula18",
        "peekOfCode": "n1 = input('digite o seu nome')\nn2 = input('digite o seu nome')\nn3 = input('digite o seu nome')\nn4 = input('digite o seu nome')\nn5 = input('digite o seu nome')\nn6 = input('digite o seu nome')\nlista = [n1, n2, n3, n4, n5, n6]\nprint(lista)\nsorteio = random.choice(lista)\nprint(sorteio)",
        "detail": "modulo01.aula18",
        "documentation": {}
    },
    {
        "label": "n2",
        "kind": 5,
        "importPath": "modulo01.aula18",
        "description": "modulo01.aula18",
        "peekOfCode": "n2 = input('digite o seu nome')\nn3 = input('digite o seu nome')\nn4 = input('digite o seu nome')\nn5 = input('digite o seu nome')\nn6 = input('digite o seu nome')\nlista = [n1, n2, n3, n4, n5, n6]\nprint(lista)\nsorteio = random.choice(lista)\nprint(sorteio)",
        "detail": "modulo01.aula18",
        "documentation": {}
    },
    {
        "label": "n3",
        "kind": 5,
        "importPath": "modulo01.aula18",
        "description": "modulo01.aula18",
        "peekOfCode": "n3 = input('digite o seu nome')\nn4 = input('digite o seu nome')\nn5 = input('digite o seu nome')\nn6 = input('digite o seu nome')\nlista = [n1, n2, n3, n4, n5, n6]\nprint(lista)\nsorteio = random.choice(lista)\nprint(sorteio)",
        "detail": "modulo01.aula18",
        "documentation": {}
    },
    {
        "label": "n4",
        "kind": 5,
        "importPath": "modulo01.aula18",
        "description": "modulo01.aula18",
        "peekOfCode": "n4 = input('digite o seu nome')\nn5 = input('digite o seu nome')\nn6 = input('digite o seu nome')\nlista = [n1, n2, n3, n4, n5, n6]\nprint(lista)\nsorteio = random.choice(lista)\nprint(sorteio)",
        "detail": "modulo01.aula18",
        "documentation": {}
    },
    {
        "label": "n5",
        "kind": 5,
        "importPath": "modulo01.aula18",
        "description": "modulo01.aula18",
        "peekOfCode": "n5 = input('digite o seu nome')\nn6 = input('digite o seu nome')\nlista = [n1, n2, n3, n4, n5, n6]\nprint(lista)\nsorteio = random.choice(lista)\nprint(sorteio)",
        "detail": "modulo01.aula18",
        "documentation": {}
    },
    {
        "label": "n6",
        "kind": 5,
        "importPath": "modulo01.aula18",
        "description": "modulo01.aula18",
        "peekOfCode": "n6 = input('digite o seu nome')\nlista = [n1, n2, n3, n4, n5, n6]\nprint(lista)\nsorteio = random.choice(lista)\nprint(sorteio)",
        "detail": "modulo01.aula18",
        "documentation": {}
    },
    {
        "label": "lista",
        "kind": 5,
        "importPath": "modulo01.aula18",
        "description": "modulo01.aula18",
        "peekOfCode": "lista = [n1, n2, n3, n4, n5, n6]\nprint(lista)\nsorteio = random.choice(lista)\nprint(sorteio)",
        "detail": "modulo01.aula18",
        "documentation": {}
    },
    {
        "label": "sorteio",
        "kind": 5,
        "importPath": "modulo01.aula18",
        "description": "modulo01.aula18",
        "peekOfCode": "sorteio = random.choice(lista)\nprint(sorteio)",
        "detail": "modulo01.aula18",
        "documentation": {}
    },
    {
        "label": "n1",
        "kind": 5,
        "importPath": "modulo01.aula19",
        "description": "modulo01.aula19",
        "peekOfCode": "n1 = input(\"digite o seu nome\")\nn2 = input(\"digite o seu nome\")\nn3 = input(\"digite o seu nome\")\nn4 = input(\"digite o seu nome\")\nn5 = input(\"digite o seu nome\")\nn6 = input(\"digite o seu nome\")\npoli = \"*\"*20\nlista = [n1, n2, n3, n4, n5, n6]\nshuffle(lista)\nsorteio = choice(lista)",
        "detail": "modulo01.aula19",
        "documentation": {}
    },
    {
        "label": "n2",
        "kind": 5,
        "importPath": "modulo01.aula19",
        "description": "modulo01.aula19",
        "peekOfCode": "n2 = input(\"digite o seu nome\")\nn3 = input(\"digite o seu nome\")\nn4 = input(\"digite o seu nome\")\nn5 = input(\"digite o seu nome\")\nn6 = input(\"digite o seu nome\")\npoli = \"*\"*20\nlista = [n1, n2, n3, n4, n5, n6]\nshuffle(lista)\nsorteio = choice(lista)\nprint(poli, \"trimania de outubro\", poli, \"\\n\")",
        "detail": "modulo01.aula19",
        "documentation": {}
    },
    {
        "label": "n3",
        "kind": 5,
        "importPath": "modulo01.aula19",
        "description": "modulo01.aula19",
        "peekOfCode": "n3 = input(\"digite o seu nome\")\nn4 = input(\"digite o seu nome\")\nn5 = input(\"digite o seu nome\")\nn6 = input(\"digite o seu nome\")\npoli = \"*\"*20\nlista = [n1, n2, n3, n4, n5, n6]\nshuffle(lista)\nsorteio = choice(lista)\nprint(poli, \"trimania de outubro\", poli, \"\\n\")\nprint(f\"parabens {sorteio} voce ganhou 500 milhoes de reais\")",
        "detail": "modulo01.aula19",
        "documentation": {}
    },
    {
        "label": "n4",
        "kind": 5,
        "importPath": "modulo01.aula19",
        "description": "modulo01.aula19",
        "peekOfCode": "n4 = input(\"digite o seu nome\")\nn5 = input(\"digite o seu nome\")\nn6 = input(\"digite o seu nome\")\npoli = \"*\"*20\nlista = [n1, n2, n3, n4, n5, n6]\nshuffle(lista)\nsorteio = choice(lista)\nprint(poli, \"trimania de outubro\", poli, \"\\n\")\nprint(f\"parabens {sorteio} voce ganhou 500 milhoes de reais\")",
        "detail": "modulo01.aula19",
        "documentation": {}
    },
    {
        "label": "n5",
        "kind": 5,
        "importPath": "modulo01.aula19",
        "description": "modulo01.aula19",
        "peekOfCode": "n5 = input(\"digite o seu nome\")\nn6 = input(\"digite o seu nome\")\npoli = \"*\"*20\nlista = [n1, n2, n3, n4, n5, n6]\nshuffle(lista)\nsorteio = choice(lista)\nprint(poli, \"trimania de outubro\", poli, \"\\n\")\nprint(f\"parabens {sorteio} voce ganhou 500 milhoes de reais\")",
        "detail": "modulo01.aula19",
        "documentation": {}
    },
    {
        "label": "n6",
        "kind": 5,
        "importPath": "modulo01.aula19",
        "description": "modulo01.aula19",
        "peekOfCode": "n6 = input(\"digite o seu nome\")\npoli = \"*\"*20\nlista = [n1, n2, n3, n4, n5, n6]\nshuffle(lista)\nsorteio = choice(lista)\nprint(poli, \"trimania de outubro\", poli, \"\\n\")\nprint(f\"parabens {sorteio} voce ganhou 500 milhoes de reais\")",
        "detail": "modulo01.aula19",
        "documentation": {}
    },
    {
        "label": "poli",
        "kind": 5,
        "importPath": "modulo01.aula19",
        "description": "modulo01.aula19",
        "peekOfCode": "poli = \"*\"*20\nlista = [n1, n2, n3, n4, n5, n6]\nshuffle(lista)\nsorteio = choice(lista)\nprint(poli, \"trimania de outubro\", poli, \"\\n\")\nprint(f\"parabens {sorteio} voce ganhou 500 milhoes de reais\")",
        "detail": "modulo01.aula19",
        "documentation": {}
    },
    {
        "label": "lista",
        "kind": 5,
        "importPath": "modulo01.aula19",
        "description": "modulo01.aula19",
        "peekOfCode": "lista = [n1, n2, n3, n4, n5, n6]\nshuffle(lista)\nsorteio = choice(lista)\nprint(poli, \"trimania de outubro\", poli, \"\\n\")\nprint(f\"parabens {sorteio} voce ganhou 500 milhoes de reais\")",
        "detail": "modulo01.aula19",
        "documentation": {}
    },
    {
        "label": "sorteio",
        "kind": 5,
        "importPath": "modulo01.aula19",
        "description": "modulo01.aula19",
        "peekOfCode": "sorteio = choice(lista)\nprint(poli, \"trimania de outubro\", poli, \"\\n\")\nprint(f\"parabens {sorteio} voce ganhou 500 milhoes de reais\")",
        "detail": "modulo01.aula19",
        "documentation": {}
    },
    {
        "label": "idade",
        "kind": 5,
        "importPath": "modulo01.aula20",
        "description": "modulo01.aula20",
        "peekOfCode": "idade = 15\nif idade > 18:\n    print(\"o usuario e maior de 18\")\nelif idade < 18:\n    print(\"o usuario e menor de 18\")\nelse:\n    print(\"o usuario tem exatamente 18 anos\")",
        "detail": "modulo01.aula20",
        "documentation": {}
    },
    {
        "label": "n1",
        "kind": 5,
        "importPath": "modulo01.aula22",
        "description": "modulo01.aula22",
        "peekOfCode": "n1 = float(input(\"digite sua nota\"))\nn2 = float (input(\"digite sua nota\"))\nmedia = (n1 + n2) / 2\nif media <=3.0:\n    print(\"voce foi reprovado por unanimidade seu vacilao\")\nelif media <6.0:\n    print(\"voce ainda tem chance de passar, fazendo recuperacao\")\nelif media >=7.0 <8.0:\n    print(\"voce passou mas nao merece parabens, fez sua obrigaçao\")\nelif media >=8.0 <=9.0:",
        "detail": "modulo01.aula22",
        "documentation": {}
    },
    {
        "label": "n2",
        "kind": 5,
        "importPath": "modulo01.aula22",
        "description": "modulo01.aula22",
        "peekOfCode": "n2 = float (input(\"digite sua nota\"))\nmedia = (n1 + n2) / 2\nif media <=3.0:\n    print(\"voce foi reprovado por unanimidade seu vacilao\")\nelif media <6.0:\n    print(\"voce ainda tem chance de passar, fazendo recuperacao\")\nelif media >=7.0 <8.0:\n    print(\"voce passou mas nao merece parabens, fez sua obrigaçao\")\nelif media >=8.0 <=9.0:\n    print(\"voce foi bem parabens\")",
        "detail": "modulo01.aula22",
        "documentation": {}
    },
    {
        "label": "media",
        "kind": 5,
        "importPath": "modulo01.aula22",
        "description": "modulo01.aula22",
        "peekOfCode": "media = (n1 + n2) / 2\nif media <=3.0:\n    print(\"voce foi reprovado por unanimidade seu vacilao\")\nelif media <6.0:\n    print(\"voce ainda tem chance de passar, fazendo recuperacao\")\nelif media >=7.0 <8.0:\n    print(\"voce passou mas nao merece parabens, fez sua obrigaçao\")\nelif media >=8.0 <=9.0:\n    print(\"voce foi bem parabens\")\nelif media >9.0:",
        "detail": "modulo01.aula22",
        "documentation": {}
    },
    {
        "label": "n1",
        "kind": 5,
        "importPath": "modulo01.aula23",
        "description": "modulo01.aula23",
        "peekOfCode": "n1 = int(input(\"digite um numero\"))\nresultado = n1 % 2\nprint(\"o  resultado é \", resultado)\nif resultado == 0:\n    print(f\"o numero {n1} é par\")\nelse:\n    print(f\"o numero {n1} é impra\")",
        "detail": "modulo01.aula23",
        "documentation": {}
    },
    {
        "label": "resultado",
        "kind": 5,
        "importPath": "modulo01.aula23",
        "description": "modulo01.aula23",
        "peekOfCode": "resultado = n1 % 2\nprint(\"o  resultado é \", resultado)\nif resultado == 0:\n    print(f\"o numero {n1} é par\")\nelse:\n    print(f\"o numero {n1} é impra\")",
        "detail": "modulo01.aula23",
        "documentation": {}
    },
    {
        "label": "lista",
        "kind": 5,
        "importPath": "modulo01.aula24",
        "description": "modulo01.aula24",
        "peekOfCode": "lista = []\n#palavra reservada 0 1 2\nfor i in range(3):\n    nome = input(\"digite seu nome :\")\n    lista.append(nome)\nprint(lista)\n#inicio I fim 3\n#for trabalha com indice",
        "detail": "modulo01.aula24",
        "documentation": {}
    },
    {
        "label": "n1",
        "kind": 5,
        "importPath": "modulo01.aula26",
        "description": "modulo01.aula26",
        "peekOfCode": "n1 = int(input(\"digite o numero de vezes que deseja pedir a nota de um aluno\"))\nlista = []\nfor i in range(n1):\n    nota = float(input(\"digite sua nota :\"))\n    lista.append(nota)\nmedia = sum(lista) / len(lista)\nprint(media)",
        "detail": "modulo01.aula26",
        "documentation": {}
    },
    {
        "label": "lista",
        "kind": 5,
        "importPath": "modulo01.aula26",
        "description": "modulo01.aula26",
        "peekOfCode": "lista = []\nfor i in range(n1):\n    nota = float(input(\"digite sua nota :\"))\n    lista.append(nota)\nmedia = sum(lista) / len(lista)\nprint(media)",
        "detail": "modulo01.aula26",
        "documentation": {}
    },
    {
        "label": "media",
        "kind": 5,
        "importPath": "modulo01.aula26",
        "description": "modulo01.aula26",
        "peekOfCode": "media = sum(lista) / len(lista)\nprint(media)",
        "detail": "modulo01.aula26",
        "documentation": {}
    },
    {
        "label": "n1",
        "kind": 5,
        "importPath": "modulo01.aula28",
        "description": "modulo01.aula28",
        "peekOfCode": "n1 = int(input(\"digite o numero de vezes que voce deseja que vai repetir\"))\nfor c in range(1, n1+1):\n    print(c)",
        "detail": "modulo01.aula28",
        "documentation": {}
    },
    {
        "label": "nota",
        "kind": 5,
        "importPath": "modulo01.aula31",
        "description": "modulo01.aula31",
        "peekOfCode": "nota = int(input(\"digite o numero da tabuada que deseja saber\"))\nfor c in range(1, 11): \n    print (\"{} x {} = {}\".format(nota, c, nota*c))",
        "detail": "modulo01.aula31",
        "documentation": {}
    },
    {
        "label": "c",
        "kind": 5,
        "importPath": "modulo01.aula32",
        "description": "modulo01.aula32",
        "peekOfCode": "c = 0\nwhile c <= 10:\n    print(c)\n    c = c+1",
        "detail": "modulo01.aula32",
        "documentation": {}
    },
    {
        "label": "var",
        "kind": 5,
        "importPath": "modulo01.aula33",
        "description": "modulo01.aula33",
        "peekOfCode": "var = 1\nwhile var != 0:\n    n1 = int(input(\"digite um numero\"))\n    n2 = int(input(\"digite um numero\"))\n    soma = n1 + n2\n    print(f\"o primeiro numero é {n1}\\n o segundo numero digitado é {n2}\\n a soma é {soma}\")\n    print(f\"deseja fazer um novo calculo?\")\n    var = int(input(\"digite 1 para continuar?\\nDigite 0 para sair\"))\nprint(\"voce saiu do sistema\")",
        "detail": "modulo01.aula33",
        "documentation": {}
    },
    {
        "label": "var",
        "kind": 5,
        "importPath": "modulo01.aula34",
        "description": "modulo01.aula34",
        "peekOfCode": "var = 'sim'\n#lover()transforma a string em minusculo\n# upper()transforma a string toda em minusculo\n#capitalize()transforma a primeira em minusculo\nwhile var,capitalize() == 'Sim'\n    n1 = int(input(\"digite um numero\"))\n    n2 = int(input(\"digite um numero\"))\n    soma = n1 + n2\n    print(f\"o primeiro numero é {n1}\\n o segundo numero digitado é {n2}\\n a soma é {soma}\")\n    print(f\"deseja fazer um novo calculo?\")",
        "detail": "modulo01.aula34",
        "documentation": {}
    },
    {
        "label": "situacao",
        "kind": 5,
        "importPath": "modulo01.aula34",
        "description": "modulo01.aula34",
        "peekOfCode": "situacao = \"Reprovado\"\nwhile situacao.capitalize() == \"Reprovado\":\n# Bloco 1 saudação\n    hora = datetime.now(tz=None)\n    if hora.hour >=5 and hora.hour <13:\n        print(\" Bom Dia\")\n    elif hora.hour >=13 and hora.hour <18:\n        print(\"Boa Tarde\")\n    else:\n        print(\" Boa Noite\") ",
        "detail": "modulo01.aula34",
        "documentation": {}
    },
    {
        "label": "situacao",
        "kind": 5,
        "importPath": "modulo01.aula35",
        "description": "modulo01.aula35",
        "peekOfCode": "situacao = \"Reprovado\"\nwhile situacao.capitalize() == \"Reprovado\":\n# Bloco 1 saudação\n    hora = datetime.now(tz=None)\n    if hora.hour >=5 and hora.hour <13:\n        print(\" Bom Dia\")\n    elif hora.hour >=13 and hora.hour <18:\n        print(\"Boa Tarde\")\n    else:\n        print(\" Boa Noite\") ",
        "detail": "modulo01.aula35",
        "documentation": {}
    },
    {
        "label": "conn",
        "kind": 5,
        "importPath": "banco",
        "description": "banco",
        "peekOfCode": "conn = sqlite3.connect('BancoTeste.sqlite3')\nprint('banco criado')",
        "detail": "banco",
        "documentation": {}
    }
]